<%- include('partials/header', { title: 'Dashboard' }) %>
<%- include('partials/messages') %>

<div class="summary-container">
    <div class="stat-card">
        <h3>Total Users</h3>
        <p><%= totalUsers %></p>
    </div>
    <div class="stat-card">
        <h3>Collected This Month</h3>
        <p><%= totalCollected %></p>
    </div>
    <div class="stat-card">
        <h3>Unpaid Users</h3>
        <p><%= unpaidUsersCount %></p>
    </div>
</div>

<div class="content-section">
    <h2>Record a Payment</h2>

    <div class="search-container" style="margin-bottom: 20px;">
        <input type="text" id="userSearchInput" onkeyup="filterUserDropdown()" placeholder="Type or use mic to search...">
        <button id="mic-btn" title="Search with Voice"><i class="fas fa-microphone"></i></button>
    </div>
    
    <form action="/save-payment" method="post">
        <label for="userId">Select User:</label>
        <select name="userId" id="userId" required>
            <% if (typeof locations !== 'undefined') { %>
                <% locations.forEach(location => { %>
                    <optgroup label="<%= location.name %>">
                        <% location.users.forEach(user => { %>
                            <option value="<%= user._id %>" data-fare="<%= user.fixedFare %>">
                                <%= user.name %> <% if (user.balance > 0) { %> (Owes: <%= user.balance %>) <% } %>
                            </option>
                        <% }); %>
                    </optgroup>
                <% }); %>
            <% } %>
        </select>
        <br><br>
        <label for="amount">Amount:</label>
        <input type="number" name="amount" id="amount" required>
        <br><br>
        <button type="submit" class="btn">Save Payment</button>
    </form>
</div>



<script>
    function filterUserDropdown() {
        const input = document.getElementById('userSearchInput');
        const filter = input.value.toUpperCase();
        const select = document.getElementById('userId');
        const optgroups = select.getElementsByTagName('optgroup');

        for (let i = 0; i < optgroups.length; i++) {
            const options = optgroups[i].getElementsByTagName('option');
            let groupHasVisibleOptions = false;
            for (let j = 0; j < options.length; j++) {
                const txtValue = options[j].textContent || options[j].innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    options[j].style.display = "";
                    groupHasVisibleOptions = true;
                } else {
                    options[j].style.display = "none";
                }
            }
            if (groupHasVisibleOptions) {
                optgroups[i].style.display = "";
            } else {
                optgroups[i].style.display = "none";
            }
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        const userSelect = document.getElementById('userId');
        const amountInput = document.getElementById('amount');

        function updateAmount() {
            const selectedOption = userSelect.options[userSelect.selectedIndex];
            if (selectedOption) {
                const fare = selectedOption.getAttribute('data-fare');
                if (fare) {
                    amountInput.value = fare;
                }
            }
        }
        userSelect.addEventListener('change', updateAmount);
        updateAmount();

        const micBtn = document.getElementById('mic-btn');
        const searchInput = document.getElementById('userSearchInput');

        if ('webkitSpeechRecognition' in window) {
            const recognition = new webkitSpeechRecognition();
            recognition.continuous = false;
            recognition.lang = 'en-US';

            recognition.onstart = function() {
                micBtn.classList.add('is-listening');
                micBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            };

            recognition.onend = function() {
                micBtn.classList.remove('is-listening');
                micBtn.innerHTML = '<i class="fas fa-microphone"></i>';
            };

            recognition.onresult = function(event) {
                const transcript = event.results[0][0].transcript;
                searchInput.value = transcript;
                // THIS IS THE NEW, MORE RELIABLE FIX:
                // It simulates a key press to guarantee the search runs.
                searchInput.dispatchEvent(new Event('keyup'));
            };

            micBtn.addEventListener('click', function() {
                recognition.start();
            });

        } else {
            micBtn.style.display = 'none';
            console.log('Speech Recognition not supported in this browser.');
        }
    });
</script>

<%- include('partials/footer') %>